---
title: "b4"
author: "Rajwant Mishra"
date: "February 24, 2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown
Variable	Description
Time	Record time to complete course
Distance	Distance in the course
Climb	Vertical climb in the course
```{r}
url = 'http://www.statsci.org/data/general/hills.txt' 
races.table = read.table(url, header=TRUE, sep='\t')


head(races.table)
```
```{r}
par(mfrow=c(2,2))
hist(races.table$Distance)
hist(races.table$Climb)
hist(races.table$Time)

plot(races.table, bg='orange',cex=1)

```
```{r}
model1 <- lm(Time~Distance+Climb, data = races.table)
par(mfrow=c(2,2))
plot(model1)
boxplot(races.table)
hist(resid(model1)) # Histagram is right skewed

races.table2 <- races.table[-c(7,18),]
```

```{r}

model2 <- lm(Time~Distance+Climb, data = races.table2)
par(mfrow=c(2,2))
plot(model2)
summary(model2)
races.table3 <- races.table2[-c(14,33),]

```
```{r}
model3 <- lm(Time~Distance+Climb, data = races.table3)
par(mfrow=c(2,2))
plot(model3)
# races.table3 <- races.table2[-c(14,33),]
summary(model3)
```

```{r}
plot(Time~Distance,races.table)
abline(lm(formula = Time ~ Distance , data = races.table))


library(ggplot2)

ggplot(races.table, aes(Distance, Time)) + 
  geom_point(fill = "indianred4", color="indianred4") + 
  geom_smooth(method = "lm",  color = "black")  
  # facet_wrap(~variable, scales ="free", ncol = 4) +
  # labs(x = element_blank(), y = "Wins")
```
Standardized Residual
The standardized residual is the residual divided by its standard deviation.


```{r}
library(MASS)
car::influencePlot(model1)
plot(resid(model1))
caret::RMSE(predict(model1), races.table$Time,na.rm = TRUE)
# "yhat" =predict(model2,races.table) is the predicted value of ith term from the model with ith observation deleted

Result<- data.frame("Time" = races.table$Time, 
           "yhat" =predict(model1), 
           "yhat2" =predict(model2,races.table), 
           "residual" = resid(model1) ,
           "deleted_residual" = races.table$Time - predict(model2,races.table),
           "std_Res" = rstandard(model1),  #std = residual divided by its standard deviation of residual 
           "Stu_Res" = studres(model)) 


```

```{r}
library(tidyverse)
boxplot(Result$deleted_residual)

 # identify all outliers
car::Boxplot(Result, id=list(n=Inf)) # identify all outliers

```
Is this a large deleted residual? Well, we can tell from the plot in this simple linear regression case that the red data point is clearly influential, and so this deleted residual must be considered large. But, in general, how large is large? Unfortunately, there's not a straightforward answer to that question. Deleted residuals depend on the units of measurement just as the ordinary residuals do. We can solve this problem touchthough by dividing each deleted residual by an estimate of its standard deviation. That's where "studentized residuals" come into play.

A studentized residual (sometimes referred to as an "externally studentized residual" or a "deleted t residual") is:
```{r}
df = 34-2-2
Result<- mutate(Result, cstud = deleted_residual/sd(deleted_residual), 
                tval= paste(round(qt(c(.025, .999), df),3) ,collapse="--"),
                posib_inf =ifelse( (qt(.025, df)< cstud) & (cstud < qt(.975, df)) , "T " ,"F"))

```


```{r}
Result
```

As you can see, the studentized residual ("TRES1") for the red data point is t4 = -19.7990. Now we just have to decide if this is large enough to deem the data point influential. To do that we rely on the fact that, in general, studentized residuals follow a t distribution with (n–k–2) degrees of freedom. That is, all we need to do is compare the studentized residuals to the t distribution with (n–k–2) degrees of freedom. If a data point's studentized residual is extreme—that is, it sticks out like a sore thumb—then the data point is deemed influential.

```{r}
t.values <- seq(-4,4,.1)


plot(x = t.values,y = dt(t.values,21), type = "l", lty = "dotted", ylim = c(0,.4), xlab = "t", ylab = "f(t)")
lines(t.values,dt(t.values,3),lty = "dashed")
lines(t.values,dt(t.values,31),lty = "solid")
lines(t.values,dt(t.values,51),lty = "solid")
lines(t.values,dt(t.values,1),lty = "dashed")


```


