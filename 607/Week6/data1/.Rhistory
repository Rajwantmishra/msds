if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),
color="white" , fill= "black",nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","ca")
EntropyGraph(hdataT,"target","thal")
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(label=get(names(data[i])), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(label=get(names(data[i])), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","thal")
EntropyGraph(hdataT,"target")
EntropyGraph(hdata,"target","thal")
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(label = get(names(data[i])), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","thal")
hdata
EntropyGraph(hdata,"target","thal")
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(label = var, color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","thal")
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(aes(label = names(data[i])), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","ca")
EntropyGraph(hdata,"target","thal")
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(aes(label = get(names(data[i]))), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","thal")
EntropyGraph(hdataF,"target","fbs")
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(aes(label = get(names(data[i]))), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph <- function(data,target,var = NA) {
if (is.na(var)){
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])==target){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- as.data.frame(prop.table(table(data[i])))[[2]]
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
g <- g +geom_text(aes(label = get(names(data[i]))),color="red")
# g <- g +geom_text(aes(label = p),color="green",nudge_x = .5)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+  guides(fill=guide_legend(title=names(data[i])))
# g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
print(g)
}
}else{
#use ddply to compute e and p for each value of the feature
for (i in 1:length(data)){
if(names(data[i])!=var){next}
#Strip out rows where feature is NA
data<-data[!is.na(data[,names(data[i])]),]
dd_data<-ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target))
dd_data$p <- round(as.data.frame(prop.table(table(data[i])))[[2]],2)
# assign(paste0("EPLT",names(data[i])),
#        ddply(data, names(data[i]), here(summarise), e=entropy(target), N=length(target)))
# print (names(data[i]))
g <- ggplot(dd_data,aes(x=p,y= e,fill=get(names(data[i]))))
g <- g+ geom_col(position = "dodge")
g <- g+ ggtitle(paste("Entropy proportion of",names(data[i]), "for Target: ",target))
#g <- g + geom_text(aes(label = get(names(data[i]))),                            color="white" , fill= "black",nudge_y = -0.02)
g <- g + geom_label(aes(label = get(names(data[i]))), color="white", size=5, nudge_y = -0.02)
g <- g +geom_text(aes(label = p),color="blue",nudge_x = .01, nudge_y= 0.04)
g <- g+ ylab("Entropy") + xlab("Proportion")
g <- g+ guides(fill=guide_legend(title=var))
#g <- g+ geom_rect(mapping=aes(xmin= median(p) ,xmax= max(p),ymin=0,ymax=max(e),color="green"),color="black", alpha=0.01)
g <- g +    geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
#g <- g + geom_point(aes(shape=names(data[i]),color=names(data[i])))
print(g)
}
}
}
EntropyGraph(hdata,"target","thal")
EntropyGraph(hdataT,"target","fbs")
hdata
gather(hdata,key = "R1", value = "RAJ",)
r <- ddply(hdataT, "oldpeak", here(summarise), e=entropy(get("target")), N=length(get("target")))
r$p<- as.data.frame(prop.table(table(hdataT$fbs)))[[2]]
ggplot(r,aes(x=p,y= e,fill=oldpeak))+geom_col(position="dodge")+
geom_text(aes(label = oldpeak),color="red")+
geom_rect(mapping=aes(xmin= .5,xmax=1,ymin=0,ymax=.5,color="green"),color="red", alpha=0)
# ggplot(r,aes(x=p,y= e,fill=fbs))+geom_point(aes(shape=fbs,color=fbs))+geom_col(position="dodge")
table(filter(hdata,fbs==TRUE)$target)
table(filter(hdata,fbs==TRUE)$target)
hdataT
EntropyGraph(hdataT,"target","exangexercise")
EntropyGraph(hdataT,"target","exangexercise")
hdataT
hdataT$exangexercise
hdataT$exang
EntropyGraph(hdataT,"target","exang")
EntropyGraph(hdataT,"target","exang")
EntropyGraph(hdataF,"target","exang")
EntropyGraph(hdataT,"target","exang")
EntropyGraph(hdataF,"target","exang")
paste("Entropy proportion of",hdata)
cat(`"`,hdata,`"`)
cat(",hdata,")
cat(",hdata,")
hdata
cat(hdata)
cat("hdata,"")
)
/
cat("",hdata,"")
cat("'",hdata,"'")
cat(",hdata,)
""
cat(",hdata,")
d <- hdata
cat(",.d.,")
catd)
cat(d)
paste(d)
EntropyGraph(hdataT,"target","exang") ## Data where heart probelm is noted
EntropyGraph(hdataF,"target","exang")  ## Data where heart probelm was not noted
EntropyGraph(hdataT,"target","exang") ## Data where heart probelm is noted
EntropyGraph(hdataF,"target","exang")  ## Data where heart probelm was not noted
spell_check_files("607_Week6_P2.rmd", ignore = character(), lang = "en_US")
knitr::opts_chunk$set(echo = TRUE)
# Load the tidyverse and the dataset
library(tidyverse)
library(plyr)
library(DT)
library(spelling)
spell_check_files("607_Week6_P2.rmd", ignore = character(), lang = "en_US")
dmt<- group_by(USImport,SampleType) %>% top_n(10,Quantity+Value)
ggplot(dmt,aes(x=Value, y=Quantity  ,label = paste(Region,str_sub(Month,1,3) ),color = factor(CTYPE)))+ geom_line(aes(color=SampleType))+geom_point( )+  facet_wrap(~SampleType)+
ggrepel:: geom_text_repel(
data          = subset(dmt,CTYPE == "Growing" & Region == "Brazil"),
nudge_x       = 3.5 ,
direction    = "x",
angle        = 90,
vjust        = 0,
segment.size = 0.2
)
