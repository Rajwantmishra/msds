type='ratings')
svdz10_Test <- calcPredictionAccuracy(
svdz10_Pred,
ratings_test_unknown)
Result <- rbind(Result,
SVD_Z_Test_10 = svdz10_Test)
Result
svdz10_Pred
ratings_test_unknown
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
}
getDivesity(ActaulData,Predicated)
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
library(lsa)
library(diveRsity)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
}
as.data.frame.array(as(svd10_pred,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box()
as.data.frame.array(as(ratings_test_unknown,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box()
# COnverting the result realmatrix to matrix
Predicated= as(svd10_pred,  "matrix")
ActaulData= as(ratings_test_unknown,  "matrix")
getDivesity(ActaulData,Predicated)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
as.data.frame.array(as(svd10_pred,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box()
as.data.frame.array(as(ratings_test_unknown,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box()
}
getDivesity(ActaulData,Predicated)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
}
getDivesity(ActaulData,Predicated)
library(lsa)
library(diveRsity)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
# COnverting the result realmatrix to matrix
Predicated= as(svd10_pred,  "matrix")
ActaulData= as(ratings_test_unknown,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
}
library(lsa)
library(diveRsity)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
}
getDivesity(ActaulData,Predicated)
library(lsa)
library(diveRsity)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
}
getDivesity(ratings_test_unknown,svd10_pred)
library(lsa)
library(diveRsity)
# FUncation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
# Printing the MAtrix
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
}
library(lsa)
library(diveRsity)
# Funcation to calualte Diversity
getDivesity <- function(ActaulData,Predicated) {
# Printing the MAtrix
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
}
getDivesity(ratings_test_unknown,svd10_pred)
# Diversity with SVD with k = 10
getDivesity(ratings_test_unknown,svd10_pred)
# Diversity with SVD with k = 10 and Normalise user rating using Z score
getDivesity(ratings_test_unknown,svdz10_Pred)
print(paste("Diversity Error %d :=> ",tag,round(actaulDIversity_Error,4) ))
library(lsa)
library(diveRsity)
# Funcation to calualte Diversity
getDivesity <- function(ActaulData,Predicated,tag) {
# Printing the MAtrix
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("Diversity Error ", tag",:=> ",tag,round(actaulDIversity_Error,4) ))
print(paste("Diversity Error /[ ", tag "," /]:=> ",tag,round(actaulDIversity_Error,4) ))
print(paste("Diversity Error /[ ", tag ," /]:=> ",tag,round(actaulDIversity_Error,4) ))
print(paste("Diversity Error [ ", tag ," ]:=> ",tag,round(actaulDIversity_Error,4) ))
getDivesity <- function(ActaulData,Predicated,tag) {
# Printing the MAtrix
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("Diversity Error [ ", tag ," ]:=> ",tag,round(actaulDIversity_Error,4) ))
}
# Diversity with SVD with k = 10
getDivesity(ratings_test_unknown,svd10_pred, "SVD k-10")
getDivesity <- function(ActaulData,Predicated,tag) {
# Printing the MAtrix
print(as.data.frame.array(as(Predicated,  "matrix")) %>% head() %>% kable(caption="Predicated Rating  ") %>% kable_styling()%>% scroll_box())
print(as.data.frame.array(as(ActaulData,  "matrix")) %>% head() %>% kable(caption="Actaul Rating ") %>% kable_styling()%>% scroll_box())
# COnverting the result realmatrix to matrix
Predicated= as(Predicated,  "matrix")
ActaulData= as(ActaulData,  "matrix")
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("Diversity Error [ ", tag ," ]:=> ",round(actaulDIversity_Error,4) ))
}
# Diversity with SVD with k = 10 and Normalise user rating using Z score
getDivesity(ratings_test_unknown,svdz10_Pred,"SVD with Z-score")
fsvd10_test
fsvd
fsvd10_predict <- predict(fsvd, ratings_test_known, verbose = TRUE)
ratings_test_unknown_predict  <- as(fsvd10_predict,"realRatingMatrix")
fsvd10_test = calcPredictionAccuracy(
ratings_test_unknown_predict,  ratings_test_unknown
)
fsvd10_test
# Diversity with SVD with k = 10
getDivesity(ratings_test_unknown,svd10_pred, "SVD k-10")
# Diversity with SVD with k = 10 and Normalise user rating using Z score
getDivesity(ratings_test_unknown,svdz10_Pred,"SVD with Z-score")
# Diversity with FSVD with k = 10 and Normalise user rating using Z score
getDivesity(ratings_test_unknown,fsvd10_predict,"SVD with Z-score")
### REMOVE WORKING CODE moved to FUNCTION
cal_cosine <- NULL
for (i in 1:(dim(ActaulData)[1])) {
a <- as.vector(ActaulData[i,])
b <- as.vector(Predicated[i, ])
# set All NA from MAIN Data = 0
b[which(is.na(a))]=0
a[which(is.na(a))]=0
cal_cosine[i] <- cosine(a ,b)  #a %*% b / sqrt(a%*%a * b%*%b)
}
print("============Caculating Diversity using cosine similarity==================")
print (cal_cosine)
print("==============================Valdiate With Data==========================")
print("==========================================================================")
a <- as.vector(ActaulData[2,])
b <- as.vector(Predicated[2, ])
b[which(is.na(a))]=0
a[which(is.na(a))]=0
print(paste("Actual Rating:=> ",a[which(a != 0)], "| Predicted Rating:=> ",round(b[which(b != 0)],2)))
print(paste("Cosine for 2nd index of Test data:=> ",
round(cosine(a[which(a != 0)],b[which(b != 0)]),2)))
print(paste("Cosine for 2nd index of Calcualted Data:=> ",round(cal_cosine[2],2)))
print(paste("Average Diversity noted :=>" , round(mean(cal_cosine),2)))
actaulDIversity_Error = 1 - mean(cal_cosine)
print(paste("DIversity Error :=> ",round(actaulDIversity_Error,4) ))
kable(Result,caption="ratings_test_unknown_predict ")
svd10_pred
install.packages("gbm")
# data processing install.packages("gbm")
library(tidyr); library(dplyr); library(RCurl); library(jsonlite); library(plyr)
#formatting
library(knitr); library(kableExtra); library(prettydoc); library(default)
#visualization
library(ggplot2)
#collaborative recommender
library(recommenderlab);
#hybrid recommender
library(gbm);library(rsample);library(Metrics);library(caret);library(textmineR)
# data processing install.packages("gbm")
library(tidyr); library(dplyr); library(RCurl); library(jsonlite); library(plyr)
#formatting
library(knitr); library(kableExtra); library(prettydoc); library(default)
#visualization
library(ggplot2)
#collaborative recommender
library(recommenderlab);
#hybrid recommender
library(gbm);
library(rsample);
install.packages("rsample")
# data processing install.packages("rsample")
library(tidyr); library(dplyr); library(RCurl); library(jsonlite); library(plyr)
#formatting
library(knitr); library(kableExtra); library(prettydoc); library(default)
#visualization
library(ggplot2)
#collaborative recommender
library(recommenderlab);
#hybrid recommender
library(gbm);
library(rsample);
library(Metrics);
library(caret);
library(textmineR)
# global options
## knit sizing
options(max.print="100"); opts_knit$set(width=75)
## augment chunk output
opts_chunk$set(echo=F,cache=F, tidy=T,comment=F,message=T,warning=T) #change message/warning to F upon completion
## set table style for consistency
default(kable) <- list(format="html")
default(kable_styling)  <- list(bootstrap_options = "hover",full_width=T, font_size=10)
default(scroll_box) <- list(width = "100%")
## working directory
##try(setwd("~/Github/612-group/project-4"))
scatter.smooth(getRatings(ratings_train))
ggplot(getRatings(ratings_train)) +
geom_point()
getRatings(ratings_train)
scatter.smooth(getRatings(ratings_train))
scatter.smooth(getRatings(normalize(ratings_train,method="Z-score")))
#  Z-score normalization reduces the variance to a range of roughly
# ???3 to +3 standard deviations. It is interesting to see that there is a pronounced peak of
# ratings between zero and two
hist(getRatings(normalize(ratings_train,method="Z-score")))
# Diversity with SVD with k = 10
getDivesity(ratings_test_unknown,svd10_pred, "SVD k-10")
# Diversity with SVD with k = 10 and Normalise user rating using Z score
getDivesity(ratings_test_unknown,svdz10_Pred,"SVD with Z-score")
# Diversity with FSVD with k = 10 and Normalise user rating using Z score
getDivesity(ratings_test_unknown,fsvd10_predict,"Funk SVD")
knit_with_parameters('~/GitHub/SPRING2019TIDYVERSE/612-group/project-4/report.Rmd')
