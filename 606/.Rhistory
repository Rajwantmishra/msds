name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name <- as.data.frame(name)
name
raw <-"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
name[name!=""]
raw <-"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name <- as.data.frame(name)
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
name
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name <- as.data.frame(name)
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name <- as.data.frame(name)
# Here, apply gives each row to any, which checks if the expression x=="" (which is itself a vector) is true for any of the elements and if so, it returns TRUE. The whole apply expression thus returns a vector of TRUE/FALSE statements, which are negated with !. This can then be used to subset your data.
name <- as.data.frame(name)
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
name[name!=""]
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name<- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name
name <- name[!apply(name, 1, function(x) any(x=="")),]
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
# Here, apply gives each row to any, which checks if the expression x=="" (which is itself a vector) is true for any of the elements and if so, it returns TRUE. The whole apply expression thus returns a vector of TRUE/FALSE statements, which are negated with !. This can then be used to subset your data.
name <- as.data.frame(name)
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
name
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
name <- as.data.frame(name)
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
name <-   as.data.frame(str_split(raw,"555"))
names(name) <- c("NAME")
name <- str_replace_all(name$NAME,
"-|[\\d]|\\(|\\)|\\.","")
name[name!=""]
trimws(name[name!=""])
as.data.frame(name)
# Here, apply gives each row to any, which checks if the expression x=="" (which is itself a vector) is true for any of the elements and if so, it returns TRUE. The whole apply expression thus returns a vector of TRUE/FALSE statements, which are negated with !. This can then be used to subset your data.
name <- as.data.frame(name)
name
name
name[!apply(name, 1, function(x) any(x=="")),]
name <- name[!apply(name, 1, function(x) any(x=="")),]
name
trimws(name[name!=""])
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name2 <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
name2
name2 <- unlist(str_extract_all(raw, "[[:alpha:], ]{2,}"))
name2
name2 <- unlist(str_extract_all(raw, "[[:alpha:]., ]{4,}"))
name2
name2 <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
name2
str_extract_all(raw.data,"\\d")
str_extract_all(raw.data,"\\d",n=6)
str_extract_all(raw.data,"\\d{2}",n=6)
str_extract_all(raw.data,"\\d{2}")
str_extract_all(raw.data,"\\d{6}")
str_extract_all(raw.data,"\\d{6,}")
str_extract_all(raw.data,"\\d{2,}")
str_extract_all(raw.data,"\\d{3,}")
str_extract_all(raw.data,"\\d?(\\d{3})?{3,}")
str_extract_all(raw.data,"\\d?(\\d{3})?")
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?
(-| )?\\d{3}(-| )?\\d{4}"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?
(-| )?\\d{3}(-| )?\\d{4}"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}")
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
p<- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
digit
d
[:punct:]
[[:punct:]]
example.obj <- c("1. A small sentence. - 2. Another tiny sentence.")
unlist(str_extract_all(example.obj, "[[:punct:]ABC]"))
unlist(str_extract_all(example.obj, "[ˆ[:alnum:]]"))
unlist(str_extract_all(example.obj, "[ˆ[:alnum:]]"))
unlist(str_extract_all(example.obj, "[[:punct:]A-C]"))
unlist(str_extract_all(example.obj, "[[:punct:]A-Ca-c]"))
unlist(str_extract_all(example.obj, "^[[:punct:]A-Ca-c]"))
unlist(str_extract_all(example.obj, "[[:punct:]A-Ca-c]"))
unlist(str_extract_all(example.obj, "[^[:punct:]A-Ca-c]"))
unlist(str_extract_all(example.obj, "[[:alnum:]]"))
[[:alnum:]]
alnum
unlist(str_extract_all(example.obj, "[[:alnum:]]"))
unlist(str_extract_all(example.obj, "[[:alnum:]]|[[:punct:]]"))
unlist(str_extract_all(example.obj, "sS[[:alfa:]]"))
unlist(str_extract_all(example.obj, "sS[[:alpha:]]"))
unlist(str_extract_all(example.obj, "s[[:alpha:]]"))
unlist(str_extract_all(example.obj, "s[[:alpha:]]{10}"))
unlist(str_extract_all(example.obj, "s[[:alpha:]]{4}"))
unlist(str_extract_all(example.obj, "s[[:alpha:]]{5}"))
unlist(str_extract_all(example.obj, "s[[:alpha:]]{5}"))
str_extract(example.obj, "A.+sentence")
unlist(str_extract(example.obj, "A.+sentence"))
unlist(str_extract(example.obj, "A+sentence"))
unlist(str_extract(example.obj, "+sentence"))
unlist(str_extract(example.obj, ".+sentence"))
unlist(str_extract(example.obj, ".+"))
unlist(str_extract(example.obj, ".?"))
unlist(str_extract(example.obj, "A.+sentence"))
unlist(str_extract(example.obj, "A.?sentence"))
unlist(str_extract(example.obj, "A.+sentence?"))
unlist(str_extract(example.obj, "A.+sentence?"))
unlist(str_extract(example.obj, "A.+?sentence"))
unlist(str_extract_all(example.obj, "A.+?sentence"))
unlist(str_extract_all(example.obj, "A+?sentence"))
unlist(str_extract_all(example.obj, "A?sentence"))
unlist(str_extract_all(example.obj, "?sentence"))
unlist(str_extract_all(example.obj, "A?sentence"))
unlist(str_extract_all(example.obj, "small?sentence"))
unlist(str_extract_all(example.obj, "small?sentence"))
unlist(str_extract_all(example.obj, "A.+?sentence"))
name2 <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
name2
fn <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
fn
fn <- unlist(str_extract_all(raw, "[[:alpha:], ]{2,}"))
fn
fn <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
name2 <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
name2
fn <- unlist(str_extract_all(raw, "[[:alpha:]., ]{2,}"))
fn
fn <- unlist(str_extract_all(raw, "[[:alpha:].?, ]{2,}"))
fn
fn <- unlist(str_extract_all(raw, "[[:alpha:]. ?{1,2}, ]{2,}"))
fn
fn <- unlist(str_extract_all(raw, "[[:alpha:]. ?, ]{2,}"))
fn
unlist(str_extract_all(example.obj, fixed(".")))
unlist(str_extract_all(example.obj, fixed("\.")))
unlist(str_extract_all(example.obj, fixed("\\.")))
unlist(str_extract_all(example.obj, "\\.")
unlist(str_extract_all(example.obj, "\\.")
unlist(str_extract_all(example.obj, "\\."))
unlist(str_extract_all(example.obj, fixed(".")))
unlist(str_extract_all(example.obj, "\>"))
unlist(str_extract_all(example.obj, "\\>e"))
unlist(str_extract_all(example.obj, "\\>"))
unlist(str_extract_all(example.obj, "\\>."))
unlist(str_extract_all(example.obj, "\\D"))
unlist(str_extract_all(example.obj, "\\D{1:10}"))
unlist(str_extract_all(example.obj, "(\\D){1:10}"))
unlist(str_extract_all(example.obj, "(\\D){1,10}"))
unlist(str_extract_all(example.obj, "(\\w){1,10}"))
unlist(str_extract_all(example.obj, "(\\w){1,3}"))
unlist(str_extract_all(example.obj, "(\\w){1,8}"))
unlist(str_extract_all(example.obj, "(\\w){3}"))
unlist(str_extract_all(example.obj, "(\\w+)"))
unlist(str_extract_all(example.obj, "(\\w){3}"))
unlist(str_extract_all(example.obj, "(e\\>)"))
unlist(str_extract_all(example.obj, "e\\>"))
unlist(str_extract_all(example.obj, "e\\<"))
unlist(str_extract_all(example.obj, "e\\>"))
unlist(str_extract_all(example.obj, "e\\>"))
example.obj
unlist(str_extract_all(example.obj, "e\\>"))
str_extract_all(example.obj, "e\\>")
unlist(str_extract_all(example.obj, "s\\>"))
unlist(str_extract_all(example.obj, "e\\b"))
unlist(str_extract_all(example.obj, "(\\w+)"))
unlist(str_extract_all(str_extract_all(example.obj, "(\\w+)"), "e\\>"))
unlist(str_extract_all(unlist(str_extract_all(example.obj, "(\\w){3}")), "e\\>"))
unlist(str_extract_all(unlist(str_extract_all(example.obj, "(\\w+)")), "e\\>"))
unlist(str_extract_all(example.obj, "\\w+"))
unlist(str_extract_all(unlist(str_extract_all(example.obj, "\\w+")), "e\\>"))
unlist(str_extract_all(unlist(str_extract_all(example.obj, "\\w+")), "e\\<s"))
unlist(str_extract_all(unlist(str_extract_all(example.obj, "\\w+")), "\\<s"))
unlist(str_extract_all(example.obj, "\\<s"))
str_extract(example.obj, "(\\<[b-z]+\\>).+?\\1")
str_extract(example.obj, "\\<")
str_extract(example.obj, "\\<s")
str_extract(example.obj, "\\>s")
str_extract(example.obj, "(\\>a)")
str_extract(example.obj, "(\\<a)")
library(tidyverse)
library(lubridate)
library(stringr)
str_extract(example.obj, "(\\<[b-z]+\\>).+?\\1")
str_extract(example.obj, "(\\<a)")
unlist(str_extract_all(example.obj, "\\w+"))
str_extract(example.obj, "(\\a)")
str_extract(example.obj, "(\\a+)")
str_extract(example.obj, "(\\s+)")
str_extract(example.obj, "\\s+")
str_extract(example.obj, "\\s+")
raw.data <- 555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev.
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev.
unlist(str_extract_all(raw.data, "[[:alpha],. ]"))
unlist(str_extract_all(raw.data, "[[:alpha:],. ]"))
unlist(str_extract_all(raw.data, "[[:alpha:],. ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]. ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:].,]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{1,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{1,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{1,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{1,}"))
unlist(str_extract_all(raw.data, "[[:alpha:].,]{1,}"))
unlist(str_extract_all(raw.data, "[[:alpha:].,]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:] ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:] .]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:] ]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:] .]{2,}"))
unlist(str_extract_all(raw.data, "[[:alpha:] .,]{2,}"))
unlist(str_extract_all(raw.data, "[^[:alpha:] .,]{2,}"))
unlist(str_extract_all(raw.data, "[^[:alpha:]-\\(\\)]{3,}"))
unlist(str_extract_all(raw.data, "[^[:alpha:]-\\(\\) ]{3,}"))
unlist(str_extract_all(raw.data, "[^[:alpha:]-]{3,}"))
unlist(str_extract_all(raw.data, "[^[:alpha:]- ]{3,}"))
unlist(str_extract_all(raw.data, "[^[:alpha:]-]{3,}"))
unlist(str_extract_all(raw.data, "
\\(?(\\d{3})?\\)?
(-| )?
"
))
unlist(str_extract_all(raw.data, "
\\(?(\\d{3})?\\)?
(-| )? {2,}
"
))
unlist(str_extract_all(raw.data, "
\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}
"
))
raw.data
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d
{3}(-| )?\\d{4}"))
p<- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
p
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
unlist(str_extract_all(raw.data, "
\\(?(\\d{3})?\\)?
(-| )?
\\d{3}
(-| )?
\\d{4}
"
))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(|)?"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{3}"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{3}"))
unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
integer(0)
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 100))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 99))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 4))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 10))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 8))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 7))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 6))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 5))
agrep("Barack Obama", "Michelle Obama", max.distance = list(all = 6))
make.unique(c("a", "b", "a", "c", "b", "a"))
pmatch(c("and this", "and that", "and these", "and those"), char.vec)
# download file
if(!file.exists("listOfSimpsonsEpisodes.html")){
link <- "http://en.wikipedia.org/wiki/List_of_The_Simpsons_episodes"
download.file(link, "listOfSimpsonsEpisodes.html", mode="wb")
}
# download file
if(!file.exists("listOfSimpsonsEpisodes.html")){
link <- "http://en.wikipedia.org/wiki/List_of_The_Simpsons_episodes"
download.file(link, "listOfSimpsonsEpisodes.html", mode="wb")
}
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",
header=T, stringsAsFactors=F)
# download file
if(!file.exists("listOfSimpsonsEpisodes.html")){
link <- "http://en.wikipedia.org/wiki/List_of_The_Simpsons_episodes"
download.file(link, "listOfSimpsonsEpisodes.html", mode="wb")
}
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",
header=T, stringsAsFactors=F)
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",header=T, stringsAsFactors=F)
library(XML)
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",header=T, stringsAsFactors=F)
tables
tables
dim(tables)
length(tables)
tables[1]
tables[[1]]
tmpcols <- names(tables[[3]])
tmpcols
names(tables[[3]])
tables[[3]]
names(tables[[3]])
for(i in 3:20){
tmpcols <- intersect(tmpcols, names(tables[[i]]))
}
for(i in 3:19){
tmpcols <- intersect(tmpcols, names(tables[[i]]))
}
tmpcols
tmpcols <- names(tables[[3]])
for(i in 3:19){
tmpcols <- intersect(tmpcols, names(tables[[i]]))
}
tmpcols
episodes <- NULL
for(i in 3:20){
episodes <- rbind(episodes[,tmpcols],tables[[i]][,tmpcols])
}
for(i in 3:19){
episodes <- rbind(episodes[,tmpcols],tables[[i]][,tmpcols])
}
episodes
library(XML)
# download file
if(!file.exists("listOfSimpsonsEpisodes.html")){
link <- "http://en.wikipedia.org/wiki/List_of_The_Simpsons_episodes"
download.file(link, "listOfSimpsonsEpisodes.html", mode="wb")
}
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",header=T, stringsAsFactors=F)
length(tables)
tables[[1]]
tmpcols <- names(tables[[3]])
for(i in 3:19){
tmpcols <- intersect(tmpcols, names(tables[[i]]))
}
episodes <- NULL
for(i in 3:19){
episodes <- rbind(episodes[,tmpcols],tables[[i]][,tmpcols])
}
for(i in 1:dim(episodes)[2]){
Encoding(episodes[,i]) <- "UTF-8"
}
Encoding(episodes[,i]) <- "UTF-8"
for(i in 1:dim(episodes)[2]){
Encoding(episodes[,i]) <- "UTF-8"
}
names(episodes) <- c("pnr", "nr", "title", "directedby",
"Writtenby", "airdate", "productioncode")
episodes <- NULL
for(i in 3:19){
episodes <- rbind(episodes[,tmpcols],tables[[i]][,tmpcols])
}
episodes
names(tables[[i]])
names(tables[[1]])
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",header=T, stringsAsFactors=F)
tmpcols <- names(tables[[3]])
names(tables[[1]])
names(tables[[3]])
for(i in 3:20){
tmpcols <- intersect(tmpcols, names(tables[[i]]))
}
for(i in 3:19){
tmpcols <- intersect(tmpcols, names(tables[[i]]))
}
tables <- readHTMLTable("listOfSimpsonsEpisodes.html",header=T, stringsAsFactors=F)
tables[[1]]
tables[[3]]
length(tables)
con2 <- dbConnect(RMySQL::MySQL(), dbname = "flights", host="localhost", user="root",password= "")
query <- "SELECT * FROM movies_review"
tab1 <- dbSendQuery(con2,query)
suppressWarnings(rm(movies_review ))
movies_review <- dbFetch(tab1)
glimpse(movies_review)
#disconenct DB
dbDisconnect(con2)
con2 <- dbConnect(RMySQL::MySQL(), dbname = "flights", host="localhost", user="root",password= "")
query <- "SELECT * FROM movies_review"
tab1 <- dbSendQuery(con2,query)
suppressWarnings(rm(movies_review ))
movies_review <- dbFetch(tab1)
query <- "SELECT * FROM movies_master"
tab1 <- dbSendQuery(con2,query)
movies_master <- dbFetch(tab1)
#disconenct DB
dbDisconnect(con2)
glimpse(movies_master)
grep("Homer",movies_master$Movie_Name[1:10], value=T)
grepl("Bad",movies_master$Movie_Name[1:10], value=T)
grep("Bad",movies_master$Movie_Name[1:10], value=T)
grep("Bad",movies_master$Movie_Name[1:10], value=F)
grep("Bad",movies_master$Movie_Name[1:10], value=T)
grep("Bad",movies_master$Movie_Name[1:10])
grep("Bad",movies_master$Movie_Name[1:3])
grep("Bad",movies_master$Movie_Name[1:3], value=T)
grepl("Bad",movies_master$Movie_Name[1:10])
movies_master$Movie_Name
grep("ar",movies_master$Movie_Name[1:3], value=T)
grep("ar",movies_master$Movie_Name[1:10], value=T)
grepl("ar",movies_master$Movie_Name[1:10])
movies_master$Movie_Name
grep("ar",movies_master$Movie_Name[1:10], value=T)
grep("Bad",movies_master$Movie_Name[1:10], value=T)
grepl("Bad",movies_master$Movie_Name[1:10], value=T)
grepl("Bad",movies_master$Movie_Name[1:10])
movies_master$Movie_Name
grepl("Star",movies_master$Movie_Name[1:10])
grepall <- function(pattern, x,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE,
value=FALSE, logic=FALSE){}
sapply("Bad",grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
indicies <- sapply("Bad",grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
index <- apply(indicies, 1, all)
index <- apply(indicies, 1, all)
index
indicies
indicies <- sapply(c("Star" ,"Bad"),grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
index <- apply(indicies, 1, all)
index
movies_master$Movie_Name
indicies <- sapply(c("Star","Bad"),grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
indicies <- sapply(c("Truth","Dare"),grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
indicies <- sapply(c("Truth","Dare"),grepl, movies_master$Movie_Name,
indicies <- sapply(c("Truth","Dare"),grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
indicies
index <- apply(indicies, 1, all)
index
indicies <- sapply(c("Bad","Star"),grepl, movies_master$Movie_Name,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)
index <- apply(indicies, 1, all)
indicies
apply(indicies, 1, all)
apply(indicies, 1, some)
apply(indicies, 1, any)
#install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',                   'knitr','markdown','shiny'))
#devtools::install_github("jbryer/DATA606", force = TRUE)
devtools::install_github('jbryer/DATA606')
